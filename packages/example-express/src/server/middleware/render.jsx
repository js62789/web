import path from 'path';
import { renderToPipeableStream } from 'react-dom/server';
import { StaticRouter } from "react-router-dom/server";
import { ChunkExtractor } from '@loadable/server';
import { HelmetProvider } from 'react-helmet-async';
import Application from '../../components/Application';
import config from '../../config';

export default function render(req, res) {

  let didError = false;

  // This is the stats file generated by webpack loadable plugin
  const statsFile = path.resolve('./build/loadable-stats.json');

  // We create an extractor from the statsFile
  const extractor = new ChunkExtractor({ statsFile });

  const helmetContext = {};

  // Wrap your application using "collectChunks"
  const app = extractor.collectChunks((
    <StaticRouter location={req.url}>
      <HelmetProvider context={helmetContext}>
        <Application />
      </HelmetProvider>
    </StaticRouter>
  ));

  const stream = renderToPipeableStream(app, {
    onShellReady() {
      res.statusCode = didError ? 500 : 200;

      res.setHeader('Content-type', 'text/html');

      const { helmet } = helmetContext;

      // typically you'd want to write some preliminary HTML, since React doesn't handle this
      res.write(`
        <!doctype html>
        <html ${helmet.htmlAttributes.toString()}>
          <head>
            ${helmet.title.toString()}
            ${helmet.meta.toString()}
            ${helmet.link.toString()}
            ${extractor.getLinkTags()}
            ${helmet.style.toString()}
            ${extractor.getStyleTags()}
          </head>
        <body ${helmet.bodyAttributes.toString()}><div id="root">
      `.trim());

      // Avoid issues with server rendering old UI because it doesn't hot reload
      if (config.get('ssr')) {
        stream.pipe(res, { end: false });
      }
    },
    onShellError() {
      // Something errored before we could complete the shell so we emit an alternative shell.
      res.statusCode = 500;
      res.send('<!doctype html><h1>An error has occurred</h1></script>');
    },
    onAllReady() {
      const { helmet } = helmetContext;
      res.end(`</div>${helmet.script.toString()}${config.get('csr') ? extractor.getScriptTags() : ''}</body></html>`);
    },
    onError(err) {
      didError = true;
      console.error(err);
    },
  });
}
