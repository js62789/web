import path from 'path';
import { renderToPipeableStream } from 'react-dom/server';
import { StaticRouter } from "react-router-dom/server";
import Application from '../../components/Application';
import { ChunkExtractor } from '@loadable/server';

export default function render(req, res) {
  let didError = false;

  // This is the stats file generated by webpack loadable plugin
  const statsFile = path.resolve('./build/loadable-stats.json');

  // We create an extractor from the statsFile
  const extractor = new ChunkExtractor({ statsFile });

  // Wrap your application using "collectChunks"
  const app = extractor.collectChunks((
    <StaticRouter location={req.url}>
      <Application />
    </StaticRouter>
  ));

  const stream = renderToPipeableStream(app, {
    onShellReady() {
      res.statusCode = didError ? 500 : 200;
      res.setHeader('Content-type', 'text/html');

      // typically you'd want to write some preliminary HTML, since React doesn't handle this
      res.write([
        '<html><head>',
        '<title>Test</title>',
        extractor.getLinkTags(),
        extractor.getStyleTags(),
        '</head><body><div id="root">',
      ].join(''))

      stream.pipe(res, { end: false });
    },
    onShellError() {
      // Something errored before we could complete the shell so we emit an alternative shell.
      res.statusCode = 500;
      res.send('<!doctype html><h1>An error has occurred</h1></script>');
    },
    onAllReady() {
      res.end(`</div>${extractor.getScriptTags()}</body></html>`);
    },
    onError(err) {
      didError = true;
      console.error(err);
    },
  });
}
